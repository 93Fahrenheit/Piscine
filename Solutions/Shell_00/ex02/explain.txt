1. CR√âATION DES FICHIERS ET DOSSIERS
------------------------------------
- test0 : dossier
- test1 √† test5 : fichiers
- test2 : dossier
- test5 : lien physique (hard link) vers test3
- test6 : lien symbolique (soft link/symlink) vers test0

2. √âcrire du contenu dans les fichiers pour obtenir la bonne taille
-------------------------------------------------------------------
echo -n "a" > test3       # cr√©e test3 avec 1 octet
echo -n "bb" > test4      # cr√©e test4 avec 2 octets

- `echo -n` √©crit sans saut de ligne** (`\n`)
- `>` √©crase le contenu du fichier
- la taille du fichier d√©pend du nombre de caract√®res exacts

3. Cr√©er un lien physique
-------------------------
Commande :
ln fichier_existant nom_du_lien ou ln source destination
ln test3 test5

 Lien physique (hard link) 
- `ln` cr√©e un autre nom pour le m√™me fichier (m√™me inode)
- `test3` et `test5` partagent le m√™me contenu
- les modifications de l‚Äôun affectent l‚Äôautre
- les fichiers li√©s apparaissent avec un nombre de liens (colonne 2) ‚â• 2*
- si on supprime un des deux, l‚Äôautre reste valide


4.  Cr√©er un lien symbolique
----------------------------
Commande :
ln -s cible nom_du_lien
ln -s test0 test6

Lien symbolique (soft link/symlink)
- `ln -s` cr√©e un fichier sp√©cial contenant le chemin cible
- ce lien agit comme un raccourci
- si la cible est supprim√©e, le lien devient cass√©
- `ls -l` affiche la fl√®che : `test6 -> test0`
- les permissions affich√©es (`lrwxrwxrwx`) sont par d√©faut et non fonctionnelles : elles ne contr√¥lent pas l'acc√®s
/!\ diif√©rence selon l'OS : les droits d'un lien symboliques s'affichent souvent lrwxr-xr-x sur MacOS et lrwxrwxrwx sur Linux (n'affecte pas le comportement)

5. MODIFICATION DES HORODATAGES
----------------------------------
Commande 
touch -t AAAAMMJJhhmm nom
touch -h -t AAAAMMJJhhmm lien # pour modifier la date d‚Äôun lien symbolique (-h pour modifier le lien lui-m√™me)
touch -h -t 202406012220 test6   

test5 = m√™me inode que test3 ‚Üí inutile de le toucher

6. MODIFIER LES PERMISSIONS EN DERNIER




---------------------------------------------------------------------------------------------------
ENGLISH VERSION
---------------------------------------------------------------------------------------------------

1. FILE AND DIRECTORY CREATION
-------------------------------
- `test0`: directory
- `test1` to `test5`: files
- `test2`: directory
- `test5`: hard link to `test3`
- `test6`: symbolic link (soft link/symlink) to `test0`

------------------------------------------------------------

2. WRITE CONTENT TO FILES TO MATCH SIZE
----------------------------------------
echo -n "a" > test3       # creates `test3` with 1 byte
echo -n "bb" > test4      # creates `test4` with 2 bytes

- `echo -n` writes without a newline (`\n`)
- `>` overwrites the content of a file
- The file size depends exactly on the number of characters

------------------------------------------------------------

3. CREATE A HARD LINK
----------------------
Command:
ln source_file hard_link_name
or:
ln existing_file new_name
ln test3 test5

üß† Hard link:
- `ln` creates another name for the **same file content** (same inode)
- `test3` and `test5` share the exact same content
- Changes to one affect the other
- `ls -l` shows 2 links in the second column
- If one is deleted, the other remains valid

------------------------------------------------------------

4. CREATE A SYMBOLIC LINK
--------------------------
Command:
ln -s target link_name
ln -s test0 test6

üß† Symbolic link (symlink / soft link):
- `ln -s` creates a **special file that stores the target path**
- Acts as a shortcut or pointer
- If the target is deleted, the link becomes broken
- `ls -l` shows: `test6 -> test0`
- The displayed permissions (`lrwxrwxrwx`) are default and not enforced by the system

‚ö†Ô∏è On macOS: symlink permissions are often displayed as `lrwxr-xr-x`
On Linux: usually shown as `lrwxrwxrwx`
This is only a display difference, not a functional one.

------------------------------------------------------------

5. SETTING TIMESTAMPS
-----------------------
Commands:
touch -t YYYYMMDDhhmm file
touch -h -t YYYYMMDDhhmm symlink   # use `-h` to update the link itself

touch -h -t 202406012220 test6

Note: `test5` shares the same inode as `test3` ‚Üí no need to apply `touch` again

------------------------------------------------------------

6. SET PERMISSIONS LAST
-------------------------
(Handled separately, after all creation and content steps)
