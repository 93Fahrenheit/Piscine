🔧 Commande recommandée :
ifconfig | grep ether | awk '{print $2}'

---

🔍 Explication étape par étape :

1. 📡 `ifconfig`

- C’est une commande système qui affiche toutes les interfaces réseau (ex : eth0, en0, lo0...).
- Elle fournit des infos comme l'adresse IP, l’état de l’interface et **l'adresse MAC**.

2. 🔎 `grep ether`

- `grep` sert à filtrer les lignes qui contiennent un mot précis.
- Ici, on ne garde que les lignes contenant le mot `ether`, qui précède généralement une adresse MAC.
- Sur macOS ou Linux, les lignes contenant l’adresse MAC sont du type :
  `ether f4:0f:24:af:1b:cc`

💡 `ether` n'est **pas une option**, c’est le mot recherché dans les lignes retournées par `ifconfig`.

3. ✂️ `awk '{print $2}'`

🔸 **awk** est un langage de traitement de texte utilisé pour manipuler des lignes, champ par champ.

✅ Ce qu’il fait ici :
- Chaque ligne est découpée en colonnes séparées par des espaces.
- `$1` = premier mot, `$2` = deuxième mot (l’adresse MAC dans ce cas).

🧠 La ligne :
`ether f4:0f:24:af:1b:cc`
→ `$1 = ether`, `$2 = f4:0f:24:af:1b:cc`

✔ `awk '{print $2}'` affiche donc seulement l’adresse MAC.

📝 Détails de syntaxe :
- `'...'` : les guillemets simples empêchent Bash d’interpréter `$2` comme une **variable Bash**.
- `{print $2}` : dit à awk d’afficher uniquement le deuxième champ.

---

📚 BONUS : Ce que signifie `$` selon le contexte

| Contexte | Syntaxe      | Signification                      |
|----------|--------------|------------------------------------|
| **awk**  | `$2`          | 2ᵉ colonne de la ligne             |
| **bash** | `$2`          | 2ᵉ argument d’un script            |
| **bash** | `$VAR`        | Valeur d’une variable nommée VAR   |
| **bash** | `$?`, `$#`... | Variables spéciales du shell       |

⚠️ Même si ça se ressemble, le sens de `$` dépend du contexte (awk vs bash).

---


Tu pars de ifconfig pour avoir les interfaces.

Tu filtres avec grep ether pour ne garder que les lignes avec une adresse MAC.

Tu extrais la valeur avec awk '{print $2}'.

Cette commande affiche automatiquement chaque adresse MAC sur une ligne séparée, donc aucun \n n’est nécessaire.
