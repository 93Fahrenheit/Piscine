──────────────────────────────────────────────
📘 1. OBJECTIF DE L’EXERCICE
──────────────────────────────────────────────

➤ Tu dois écrire une ligne de commande (dans un fichier `add_chelou.sh`) qui :
1. Lit deux variables :
   - `FT_NBR1` écrit en base `'\"?!\`
   - `FT_NBR2` écrit en base `mrdoc`
2. Les convertit **en base 10**
3. Les additionne (⚠️ l’addition se fait en base 10 !)
4. Convertit le **résultat final en base `gtaio luSnemf`**
5. Affiche le résultat **sur une seule ligne**

──────────────────────────────────────────────
🔣 2. LES BASES UTILISÉES
──────────────────────────────────────────────

💡 Ce sont des **bases inventées**, mais le principe est le même que pour les bases classiques (binaire, décimale, hexadécimale).

🔹 Base 1 : `'\"?!\` → base 5
Position (index) :
| Symbole | Valeur |
|---------|--------|
| '       | 0      |
| "       | 1      |
| ?       | 2      |
| !       | 3      |
| \       | 4      |

🔹 Base 2 : `mrdoc` → base 5
| Lettre  | Valeur |
|---------|--------|
| m       | 0      |
| r       | 1      |
| d       | 2      |
| o       | 3      |
| c       | 4      |

🔹 Base 3 (résultat final) : `gtaio luSnemf` → **base 13** (et non pas 16 comme on l’a cru initialement)
| Valeur | Symbole |
|--------|---------|
| 0      | g       |
| 1      | t       |
| 2      | a       |
| 3      | i       |
| 4      | o       |
| 5      | ␣ (espace) |
| 6      | l       |
| 7      | u       |
| 8      | S       |
| 9      | n       |
| 10     | e       |
| 11     | m       |
| 12     | f       |

──────────────────────────────────────────────
🧮 3. COMPRENDRE CHAQUE ÉTAPE DU CALCUL
──────────────────────────────────────────────

🧩 Étape 1 : Convertir FT_NBR1 et FT_NBR2 en base 5 standard

Pour cela, on remplace chaque caractère par son chiffre :

▶ Pour FT_NBR1 :
echo "$FT_NBR1" | tr "'\"?!\\" "01234"

Exemple :
FT_NBR1="'"?!\" → devient "01234"

▶ Pour FT_NBR2 :

echo "$FT_NBR2" | tr "mrdoc" "01234"

Exemple :
FT_NBR2="rcrdmddd" → devient "1412011"

🧩 Étape 2 : Additionner les deux valeurs en base 10

On utilise bc, une calculatrice capable de gérer des bases.

Structure :

echo "ibase=5; (val1) + (val2)" | bc

⚠️ ibase=5 signifie que bc attend des valeurs en base 5. Il va les convertir en base 10 et les additionner.


🧩 Étape 3 : Convertir le résultat (en base 10) en base 13 avec des lettres personnalisées

On demande à bc d'afficher le résultat en base 13 :

bash
Copier
Modifier
echo "obase=13; résultat" | bc
Ensuite, le résultat (en chiffres base 13) est converti caractère par caractère vers la base gtaio luSnemf :

bash
Copier
Modifier
tr "0123456789ABC" "gtaio luSnemf"
──────────────────────────────────────────────
💡 4. LIGNE DE COMMANDE COMPLÈTE
──────────────────────────────────────────────

bash
Copier
Modifier
echo "obase=13;ibase=5;$(echo "$FT_NBR1" | tr "'\"?!\\" "01234") + $(echo "$FT_NBR2" | tr "mrdoc" "01234")" | bc | tr "0123456789ABC" "gtaio luSnemf"
🧠 DÉCRYPTAGE :

echo "... | bc → on passe l’instruction complète à la calculatrice

ibase=5 → la base des valeurs d’entrée est 5

obase=13 → on veut la sortie en base 13

$(...) → chaque nombre est transformé par tr vers une version numérique base 5

+ → addition des deux

tr ... → transforme le résultat final (ex: 10 → "e") via l’alphabet gtaio luSnemf

──────────────────────────────────────────────
🧪 5. TEST
──────────────────────────────────────────────

bash
Copier
Modifier
export FT_NBR1="\\'\"?!\\"
export FT_NBR2="rcrdmddd"
bash add_chelou.sh
💬 Affiche : Salut

──────────────────────────────────────────────
🔧 6. POUR COMPRENDRE tr ET bc
──────────────────────────────────────────────

▶ tr :

Utilisé pour remplacer un caractère par un autre.

Syntaxe : tr "SOURCE" "DEST"

Chaque caractère de SOURCE est remplacé par le caractère à la même position dans DEST.

▶ bc :

Calculatrice interactive

Comprend ibase=..., obase=... pour gérer des bases

Peut faire +, -, *, /, etc.

──────────────────────────────────────────────
✅ CONCLUSION
──────────────────────────────────────────────

Ce que tu dois retenir :

🧠 Toute base personnalisée peut être convertie via tr

🧮 bc permet d’additionner dans une base → convertir en une autre

🔤 tr peut transformer une base numérique en alphabet personnalisé

C’est un exercice parfait pour s’entraîner à :

Gérer les bases numériques

Combiner des commandes bash (echo, tr, bc)

Faire des substitutions et transformations complexes
