ðŸ“˜ 1. Quâ€™est-ce que /etc/passwd ?
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Câ€™est un fichier systÃ¨me contenant les informations des utilisateurs. Chaque ligne correspond Ã  un utilisateur et est structurÃ©e ainsi :
login:x:UID:GID:commentaire:home:shell

Exemple :
root:x:0:0:root:/root:/bin/bash

Seul le premier champ (avant les deux-points `:`) nous intÃ©resse ici : câ€™est le login.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ”§ 2. Ligne de commande complÃ¨te
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
cat /etc/passwd | grep -v '^#' | sed -n 'n;p' | cut -d ':' -f1 | rev | sort -r | sed -n "${FT_LINE1},${FT_LINE2}p" | tr '\n' ',' | sed 's/,/, /g' | sed 's/, $/./'

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ§  3. Explication dÃ©taillÃ©e Ã©tape par Ã©tape
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â–¶ `cat /etc/passwd`
â†’ Affiche le contenu du fichier `/etc/passwd`.

â–¶ `grep -v '^#'`
â†’ Supprime les lignes de commentaires.
- `grep` est un outil de filtrage de texte.
- `-v` inverse le filtre : on exclut ce qui matche.
- `'^#'` est une expression rÃ©guliÃ¨re qui cible les lignes commenÃ§ant (`^`) par un diÃ¨se (`#`), typiquement des commentaires.

â–¶ `sed -n 'n;p'`
â†’ Affiche une ligne sur deux, en commenÃ§ant par la deuxiÃ¨me.
- `sed` est un Ã©diteur de flux.
- `-n` dÃ©sactive l'affichage automatique.
- `'n;p'` est une commande double :
  - `n` saute une ligne (la premiÃ¨re)
  - `p` affiche la suivante
  Ce schÃ©ma se rÃ©pÃ¨te : une ligne est sautÃ©e, la suivante est affichÃ©e.

â–¶ `cut -d ':' -f1`
â†’ Coupe chaque ligne au sÃ©parateur `:` et garde la 1Ã¨re colonne (le login).
- `cut` est utilisÃ© pour extraire des champs.
- `-d ':'` indique que le sÃ©parateur est le caractÃ¨re `:`.
- `-f1` veut dire Â« ne garder que le premier champ Â».

â–¶ `rev`
â†’ Inverse chaque mot (chaÃ®ne de caractÃ¨res).
Exemple : `marvin` devient `nivrÃ¡m`

â–¶ `sort -r`
â†’ Trie les lignes dans lâ€™ordre alphabÃ©tique inversÃ©.
- `sort` trie ligne par ligne.
- `-r` inverse lâ€™ordre (de Z vers A).

â–¶ `sed -n "${FT_LINE1},${FT_LINE2}p"`
â†’ Affiche les lignes entre les numÃ©ros FT_LINE1 et FT_LINE2.
- `${FT_LINE1}` est une variable dâ€™environnement (ex. : 7)
- `sed -n '7,15p'` affichera les lignes 7 Ã  15 (incluses).
- Le `-n` empÃªche `sed` d'afficher toutes les lignes : seules celles indiquÃ©es par la plage `7,15` sont affichÃ©es grÃ¢ce Ã  `p` (print).

â–¶ `tr '\n' ','`
â†’ Remplace tous les sauts de ligne par des virgules.
- `tr` signifie Â« translate Â».
- `'\n'` est le caractÃ¨re de retour Ã  la ligne.
- `','` est le caractÃ¨re de remplacement.

â–¶ `sed 's/,/, /g'`
â†’ Ajoute un espace aprÃ¨s chaque virgule.
- `s/,/, /g` est une commande de substitution :
  - `s` â†’ substitution
  - la 1Ã¨re `,` â†’ motif Ã  chercher
  - la 2e `, ` â†’ ce par quoi on remplace
  - `g` â†’ globalement (toutes les virgules sur une ligne)

â–¶ `sed 's/, $/./'`
â†’ Remplace la derniÃ¨re virgule+espace par un point final.
- `s/, $/./` :
  - `, $` signifie Â« virgule suivie dâ€™un espace en fin de ligne Â»
  - on remplace Ã§a par `.`

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ“Œ Remarques importantes :
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
- La commande doit Ãªtre en **une seule ligne**.
- Il ne faut pas de retour Ã  la ligne dans la sortie (sauf celui automatique en fin dâ€™affichage terminal).
- Toutes les variables `${FT_LINE1}` et `${FT_LINE2}` doivent Ãªtre exportÃ©es avant lâ€™exÃ©cution :
  ```bash
  export FT_LINE1=7
  export FT_LINE2=15
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ§ª Exemple de test :
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
export FT_LINE1=7
export FT_LINE2=15
bash r_dwssap.sh | cat -e

Tu obtiendras une sortie comme :
sstq_, sorebrek_brk_, soibten_, sergtsop_, scodved_, rlaxcm_, rgmecived_, revreswodniw_, revressta_.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ“š RÃ©sumÃ© des commandes utilisÃ©es :
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

cat : affiche le contenu dâ€™un fichier.

grep : filtre des lignes selon un motif.

sed : Ã©diteur de flux (permet de modifier ou filtrer ligne par ligne).

cut : extrait des champs.

rev : inverse les chaÃ®nes.

sort : trie les lignes.

tr : traduit/remplace des caractÃ¨res.

export : crÃ©e une variable dâ€™environnement utilisable dans un script.

' : guillemets simples, protÃ¨gent le contenu sans interprÃ©tation.

" : guillemets doubles, interprÃ¨tent les variables comme ${}.

\ : anti-slash, utilisÃ© pour Ã©chapper des caractÃ¨res spÃ©ciaux.


