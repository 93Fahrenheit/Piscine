
╭───────────────────────────────╮
│ 🔹 DÉCLARATION D’UN TABLEAU   │
╰───────────────────────────────╯

int tab[5];                            // Déclare un tableau de 5 int
int tab[5] = {1, 2, 3, 4, 5};          // Déclare et initialise
int tab[]  = {1, 2, 3};                // Le compilateur déduit la taille (ici 3)

⚠️ La taille doit être une constante connue à la compilation.

╭──────────────────────────────────╮
│ 🔹 ACCÈS ET MODIFICATION         │
╰──────────────────────────────────╯

tab[0] = 42;                          // Affecte 42 au premier élément
int x = tab[2];                       // Stocke le 3e élément dans x

⚠️ L’indice commence à 0 → dernier = tab[size - 1]

╭────────────────────────────────────╮
│ 🔹 AFFICHAGE D’UN TABLEAU (while)  │
╰────────────────────────────────────╯

int i = 0;
while (i < size)
{
    printf("%d", tab[i]);
    if (i < size - 1)
        printf(", ");
    i++;
}

╭────────────────────────────────────╮
│ 🔹 MANIPULATION PAR POINTEURS      │
╰────────────────────────────────────╯

tab[i]         ≡ *(tab + i)            // Accès via pointeur
&tab[i]        ≡ (tab + i)             // Adresse de l’élément i

╭────────────────────────────────────╮
│ 🔹 TROUVER LA TAILLE D’UN TABLEAU  │
╰────────────────────────────────────╯

int size = sizeof(tab) / sizeof(tab[0]);

sizeof(tab) donne la taille en octets de tout le tableau
sizeof(tab[0]) donne la taille d’un seul élément
Leur division donne le nombre d’éléments

⚠️ Ne fonctionne que pour un tableau **déclaré localement**,
   pas si le tableau est passé en argument à une fonction (il devient un pointeur).

╭────────────────────────────────────╮
│ 🔹 INVERSION D’UN TABLEAU (LOGIQUE)│
╰────────────────────────────────────╯

→ Échanger les éléments extrêmes deux à deux :

int i = 0;
int j = size - 1;
while (i < j)
{
    ft_swap(&tab[i], &tab[j]);
    i++;
    j--;
}

╭─────────────────────────────╮
│ 🔹 AUTRES INFOS UTILES       │
╰─────────────────────────────╯

- Un tableau est contigu en mémoire
- Les tableaux **ne se terminent pas** par un caractère spécial comme les `char[]`
- On doit toujours **garder la taille** pour éviter de dépasser les bornes
