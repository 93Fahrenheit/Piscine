# 📘 COURS COMPLET : DIFF & PATCH

Ce cours t'explique tout ce qu’il faut comprendre pour réussir un exercice basé sur `diff` et `patch`.

---

## 1. 🔍 Qu’est-ce que `diff` ?

La commande `diff` permet de **comparer deux fichiers** ligne par ligne, et **d'afficher leurs différences** sous forme d'instructions.

➡️ On s’en sert pour repérer ce qui a changé entre deux versions d’un fichier texte.

---

## 2. 📄 Que génère `diff` ?

`diff` produit un **fichier de différences** appelé **patch** (souvent avec l’extension `.diff` ou `.patch`).

Ce fichier contient des **instructions textuelles** qui indiquent :
- quelles lignes doivent être supprimées
- quelles lignes doivent être ajoutées
- où appliquer ces changements

---

## 3. 🧪 Exemple simple

Supposons deux fichiers :

**fichier_a.txt**
Bonjour  
Comment ça va ?  
Au revoir

**fichier_b.txt**
Salut  
Comment ça va ?  
À bientôt

Commande :
diff fichier_a.txt fichier_b.txt > modif.diff

Fichier `modif.diff` :
1c1  
< Bonjour  
---  
> Salut  
3c3  
< Au revoir  
---  
> À bientôt

---

## 4. ⚙️ Comment utiliser `patch` ?

La commande `patch` applique un fichier `.diff` à un fichier d’origine, en suivant ses instructions.

### Syntaxe de base :
patch fichier_original fichier_patch.diff

Cette commande modifie le fichier original directement.

### Si on veut créer un nouveau fichier de sortie :
patch fichier_original fichier_patch.diff -o fichier_modifié

👉 Cela laisse intact le fichier original et génère une version corrigée.

---

## 5. 🎯 Utilisation typique

### Pour générer un patch :
diff -u ancien nouveau > patch.diff

- `-u` : format "unifié", plus lisible et souvent utilisé par défaut  
- `>` : redirige le résultat dans un fichier `.diff`

### Pour appliquer un patch :
patch ancien patch.diff -o nouveau

---

## 6. 🧠 Comprendre le format `.diff`

Un fichier `.diff` contient des **blocs** qui indiquent les changements.

Exemple :
@@ -1,3 +1,3 @@  
-Bonjour  
+Salut  
 Comment ça va ?  
-Au revoir  
+À bientôt

Explication :
- `@@ -1,3 +1,3 @@` : changement de la ligne 1 à 3  
- `-` : lignes à supprimer  
- `+` : lignes à insérer

---

## 7. 🧪 Tester son travail

Pour vérifier que le fichier patché est correct :
diff fichier_attendu fichier_modifié

✅ Si rien ne s'affiche, c’est que les fichiers sont identiques.

---

## 8. ✅ Cas typique d’exercice (ex07)

Tu reçois :
- un fichier `a`
- un patch `sw.diff`

Tu dois produire `b` à l’aide de :
patch a sw.diff -o b

Puis rendre le fichier `b` uniquement.

---

## 9. 🔁 Résumé des commandes utiles

- Créer un patch :
diff -u fichier1 fichier2 > patch.diff

- Appliquer un patch sans modifier l’original :
patch fichier1 patch.diff -o fichier2

- Vérifier si deux fichiers sont identiques :
diff fichier1 fichier2

- Voir les fins de lignes (utile pour cat -e) :
cat -e fichier

---

## 10. 📚 Pour aller plus loin

- man diff  
- man patch  
- https://git-scm.com/docs/git-diff  
- Pour les contributions open source : comprendre les patches est essentiel

---


